import random
import os


def generate_combination_length(n):
    symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    return ''.join(random.choices(symbols, k=n))


def avoid_repeated_symbols(combination):
    for symbol in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789':
        if symbol * 6 in combination:
            return False
    return True


def include_both_sets(combination):
    alphabet_set = set('ABCDEFGHIJKLMNOPQRSTUVWXYZ')
    number_set = set('0123456789')

    # Check if there is at least one symbol from both alphabets and numbers in every set of 5 symbols
    for i in range(len(combination) - 4):
        window = combination[i:i + 5]
        if not (alphabet_set.intersection(window) and number_set.intersection(window)):
            return False
    return True


def save_to_file(passwords, combination_length, file_number):
    file_name = f"passwords{combination_length}batch{file_number}.txt"
    with open(file_name, 'w') as file:
        for password in passwords:
            file.write(password + '\n')

def generate_valid_passwords(total_combinations, combination_length, passwords_per_file):
    generated = 0
    current_index = 0

    if not os.path.exists('combination_log.txt'):
        with open('combination_log.txt', 'w') as log_file:
            log_file.write("0\n0")  # Initializing log file with default values

    with open('combination_log.txt', 'r') as log_file:
        data = log_file.readlines()
        if len(data) > 1:
            generated = int(data[0].strip())
            current_index = int(data[1].strip())

    while generated < total_combinations:
        remaining_combinations = total_combinations - generated
        passwords_to_generate = min(remaining_combinations, passwords_per_file)
        passwords = []

        for _ in range(passwords_to_generate):
            combination = generate_combination_length(combination_length)
            if avoid_repeated_symbols(combination) and include_both_sets(combination):
                passwords.append(combination)
                generated += 1
                current_index += 1

        if passwords:
            save_to_file(passwords, combination_length, (generated // passwords_per_file) + 1)

        with open('combination_log.txt', 'w') as log_file:
            log_file.write(f"{generated}\n{current_index}")

if __name__ == "__main__":
    total_combinations_needed = int(input("Enter the total number of combinations to generate: "))
    combination_length = int(input("Enter the combination length: "))
    passwords_per_file = int(input("Enter the number of passwords per file: "))

    generate_valid_passwords(total_combinations_needed, combination_length, passwords_per_file)
    print(f"Generated {total_combinations_needed} combinations with length {combination_length}.")